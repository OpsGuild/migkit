name: Build and Push Docker Image

on:
  push:
    branches: [ main, staging ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/liquibase-migrator

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get latest Liquibase version
        id: liquibase-version
        run: |
          LIQUIBASE_VERSION=$(curl -s https://api.github.com/repos/liquibase/liquibase/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "LIQUIBASE_VERSION=$LIQUIBASE_VERSION" >> $GITHUB_OUTPUT
          echo "Latest Liquibase version: $LIQUIBASE_VERSION"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=ref,event=tag

      - name: Create additional tags
        id: additional-tags
        run: |
          # Remove 'v' prefix from tag name
          VERSION_TAG=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          echo "version-tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "Additional tag: $VERSION_TAG"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./liquibase-migrator
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.additional-tags.outputs.version-tag }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            LIQUIBASE_VERSION=${{ steps.liquibase-version.outputs.LIQUIBASE_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # SBOM generation commented out due to image availability issues
      # - name: Generate SBOM
      #   uses: anchore/sbom-action@v0
      #   with:
      #     image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.meta.outputs.digest }}
      #     format: spdx-json
      #     output-file: sbom.spdx.json
      #
      # - name: Upload SBOM
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: sbom
      #     path: sbom.spdx.json

      - name: Output image information
        run: |
          echo "Image pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.meta.outputs.digest }}"
          echo "Liquibase version used: ${{ steps.liquibase-version.outputs.LIQUIBASE_VERSION }}"
          echo "image-digest=${{ steps.meta.outputs.digest }}" >> $GITHUB_OUTPUT
        id: output-info

  # security-scan:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #   permissions:
  #     contents: read
  #     security-events: write
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Wait for image to be available
  #       run: |
  #         echo "Waiting for image to be available in registry..."
  #         sleep 60
  #         
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #
  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       with:
  #         sarif_file: 'trivy-results.sarif'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            cat CHANGELOG.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes in ${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "See commit history for details." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: true
